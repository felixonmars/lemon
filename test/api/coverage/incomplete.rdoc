== Incomplete Coverage

=== Incomplete Coverage of Publlic Methods

Given an example script in 'tmp/lib/example.rb' as follows:

  class C1
    def f1; "f1"; end
    def f2; "f2"; end
    def f3; "f3"; end
  end

  class C2
    def g1; "g1"; end
    protected
    def g2; "g2"; end
    private
    def g3; "g3"; end
  end

And given a test case in 'tmp/test/example_case.rb' as follows:

  Covers 'example.rb'

  TestCase C1 do
    Unit :f1 => "Returns a String" do
    end
    Unit :f2 => "Returns a String" do
    end
  end

  TestCase C2 do
  end

And we get the coverage information via CoverageAnalyer.

  tests = ['tmp/test/example_case.rb']

  coverage = Lemon::CoverageAnalyzer.new(tests, :loadpath=>'tmp/lib')

Then we should see that there are 2 unconvered units, C1#f3 and C2#g1 because
no testcase unit was defined for them and they are both public methods.

  coverage.uncovered_units.size == 2

  coverage.uncovered_units.assert.find{ |u| u.namespace == C1 && u.method == :f3 }
  coverage.uncovered_units.assert.find{ |u| u.namespace == C2 && u.method == :g1 }

There should still be 2 covered units, C1#f1 and C1#f2.

  coverage.covered_units.size.assert == 2

  coverage.covered_units.assert.find{ |u| u.namespace == C1 && u.method == :f1 }
  coverage.covered_units.assert.find{ |u| u.namespace == C1 && u.method == :f2 }

But we will not find any covered units for class C2.

  [ :g1, :g2, :g3 ].each do |m|
    coverage.covered_units.refute.find{ |u| u.namespace == C2 && u.method == m }
  end


