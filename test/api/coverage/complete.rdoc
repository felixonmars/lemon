= Code Coverage

== Complete Coverage

Given an example script in 'tmp/lib/example.rb' as follows:

  class C1
    def f1; "f1"; end
    def f2; "f2"; end
    def f3; "f3"; end
  end

  class C2
    def g1; "g1"; end
    protected
    def g2; "g2"; end
    private
    def g3; "g3"; end
  end

And given a test case in 'tmp/test/example_case.rb' as follows:

  Covers 'example.rb'

  TestCase C1 do
    Unit :f1 => "Returns a String" do
    end
    Unit :f2 => "Returns a String" do
    end
    Unit :f3 => "Returns a String" do
    end
  end

  TestCase C2 do
    Unit :g1 => "Returns a String" do
    end
    Unit :g2 => "Returns a String" do
    end
    Unit :g3 => "Returns a String" do
    end
  end

And we get the coverage information via CoverageAnalyer.

  tests = ['tmp/test/example_case.rb']

  coverage = Lemon::CoverageAnalyzer.new(tests, :loadpath=>'tmp/lib')

Then we should see that there are no unconvered units.

  coverage.uncovered_units.assert == []

And there should be 6 covered units, one for each class and method.

  coverage.covered_units.size.assert == 6

  [ :f1, :f2, :f3 ].each do |m|
    coverage.covered_units.assert.find{ |u| u.namespace == C1 && u.method == m }
  end

  [ :g1, :g2, :g3 ].each do |m|
    coverage.covered_units.assert.find{ |u| u.namespace == C2 && u.method == m }
  end

