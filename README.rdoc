= Lemon

* http://proutils.github.com/lemon
* http://github.com/proutils/lemon


== DESCRIPTION

Unit Testing framework that forces the developer into a
class-method mirror construction for test cases. Arguably
this promotes the proper technique for unit testing, as it
helps ensure good test coverage.


== HOW TO USE

Say our library consists of the class X:

  class X
    def a; "a"; end
  end

We write a test case as follows:

  TestCase X do
    Unit :a => "returns a string" do
      x = X.new
      x.a.assert.is_a? String
    end
  end

To run tests use the +lemon+ command-line utility.

  $ lemon test/cases/


== Checking Test Coverage

NOTE: This feature is not yet implemented!

  $ lemon --check lib/ test/cases/


== Generating Test Skeletons

NOTE: This feature is not yet implemented!

Because of the one to one correspondance of case-unit to class-method, Lemon can
also generate test scaffolding for previously written code. To do this, use the
<tt>--generate</tt> option and provide the location, or file glob, of the
scripts for which to generate test scaffolding, and the output location for
the test scripts.

  $ lemon --generate lib/ test/cases/

Generating test case scaffodling from code will undoubtedly strike test-driven developers
as a case of putting the cart before the horse. However, it is not unreasonable to argue
that high-level, behavior-driven, functional testing frameworks, such as Q.E.D. and
Cucumber are better suited to test-first methodologies. While test-driven development
can obviously be done with Lemon, unit-testing is more appropriate for testing specific,
critical protions of code, or for achieving full test coverage for mission critical applications.


== COPYRIGHT

(GPL License)

Copyright (c) 2009 Thomas Sawyer

